/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-05-09 09:31:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import com.hrit.mentorship_platform.model.*;
import com.hrit.mentorship_platform.dao.AppointmentDao;
import com.hrit.mentorship_platform.dao.MentorDao;

public final class mentor_002dappointments_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("com.hrit.mentorship_platform.model");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("com.hrit.mentorship_platform.dao.AppointmentDao");
    _jspx_imports_classes.add("com.hrit.mentorship_platform.dao.MentorDao");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

    if (session == null || session.getAttribute("user") == null) {
        response.sendRedirect("login.jsp");
        return;
    }

User user = (User) session.getAttribute("user");
MentorDao mentorDao = new MentorDao();
int mentorId = mentorDao.getMentorIdByUserId(user.getId());

AppointmentDao dao = new AppointmentDao();
List<Appointment> appointments = dao.getAppointmentsByMentorId(mentorId);

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Manage Appointments</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/mentor-appointments.css\">\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
 if (request.getParameter("msg") != null && request.getParameter("msg").equals("updated")) { 
      out.write("\r\n");
      out.write("    <p style=\"color: green;\">Appointment status updated successfully!</p>\r\n");
 } else if (request.getParameter("msg") != null && request.getParameter("msg").equals("error")) { 
      out.write("\r\n");
      out.write("    <p style=\"color: red;\">Failed to update appointment status. Try again.</p>\r\n");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h2>Appointment Requests</h2>\r\n");
      out.write("\r\n");
      out.write("        ");
 if (appointments.isEmpty()) { 
      out.write("\r\n");
      out.write("            <p>No appointment requests available.</p>\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("            <div class=\"cards-wrapper\">\r\n");
      out.write("                ");
 for (Appointment appt : appointments) { 
      out.write("\r\n");
      out.write("                    <div class=\"card\">\r\n");
      out.write("                        <h3>Appointment with Mentee ID: ");
      out.print( appt.getMenteeId() );
      out.write("</h3>\r\n");
      out.write("                        <p><strong>Date:</strong> ");
      out.print( appt.getDate() );
      out.write("</p>\r\n");
      out.write("                        <p><strong>Time:</strong> ");
      out.print( appt.getTime() );
      out.write("</p>\r\n");
      out.write("                        <p><strong>Topic:</strong> ");
      out.print( appt.getTopic() );
      out.write("</p>\r\n");
      out.write("                        <p><strong>Status:</strong> ");
      out.print( appt.getStatus() );
      out.write("</p>\r\n");
      out.write("\r\n");
      out.write("                        ");
 if ("Pending".equals(appt.getStatus())) { 
      out.write("\r\n");
      out.write("                            <form method=\"post\" action=\"update-appointment-status\" class=\"action-form\">\r\n");
      out.write("                                <input type=\"hidden\" name=\"appointmentId\" value=\"");
      out.print( appt.getId() );
      out.write("\">\r\n");
      out.write("                                <button name=\"action\" value=\"Accepted\" class=\"btn accept\">Accept</button>\r\n");
      out.write("                                <button name=\"action\" value=\"Rejected\" class=\"btn reject\">Reject</button>\r\n");
      out.write("                            </form>\r\n");
      out.write("                        ");
 } else { 
      out.write("\r\n");
      out.write("                            <p class=\"no-action\">No action required</p>\r\n");
      out.write("                        ");
 } 
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

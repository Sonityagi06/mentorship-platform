/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-05-11 18:43:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import com.hrit.mentorship_platform.model.User;

public final class mentor_002dchat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.hrit.mentorship_platform.model.User");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

    if (session == null || session.getAttribute("user") == null) {
        response.sendRedirect("login.jsp");
        return;
    }

    User user = (User) session.getAttribute("user");
    int senderId = user.getId(); // mentor's user_login.id
    int receiverId = Integer.parseInt(request.getParameter("receiverId")); // mentee's user_login.id

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Mentor Chat</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/chat-style.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            background: #f4f6f9;\r\n");
      out.write("        }\r\n");
      out.write("        .chat-container {\r\n");
      out.write("            max-width: 700px;\r\n");
      out.write("            margin: 50px auto;\r\n");
      out.write("            background: white;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            box-shadow: 0px 0px 10px rgba(0,0,0,0.2);\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("        .messages {\r\n");
      out.write("            height: 400px;\r\n");
      out.write("            overflow-y: scroll;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            border-bottom: 1px solid #ddd;\r\n");
      out.write("        }\r\n");
      out.write("        .message {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            max-width: 70%;\r\n");
      out.write("            clear: both;\r\n");
      out.write("        }\r\n");
      out.write("        .sent {\r\n");
      out.write("            background: #dcf8c6;\r\n");
      out.write("            float: right;\r\n");
      out.write("        }\r\n");
      out.write("        .received {\r\n");
      out.write("            background: #f1f0f0;\r\n");
      out.write("            float: left;\r\n");
      out.write("        }\r\n");
      out.write("        .input-box {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("        }\r\n");
      out.write("        .input-box input {\r\n");
      out.write("            flex: 1;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            border-radius: 6px;\r\n");
      out.write("        }\r\n");
      out.write("        .input-box button {\r\n");
      out.write("            margin-left: 10px;\r\n");
      out.write("            padding: 10px 15px;\r\n");
      out.write("            background-color: #4CAF50;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 6px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("        .input-box button:hover {\r\n");
      out.write("            background-color: #45a049;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"chat-container\">\r\n");
      out.write("    <div class=\"messages\" id=\"messages\">\r\n");
      out.write("        <!-- Messages will be loaded here dynamically -->\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"input-box\">\r\n");
      out.write("        <input type=\"text\" id=\"messageInput\" placeholder=\"Type your message...\">\r\n");
      out.write("        <button onclick=\"sendMessage()\">Send</button>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const senderId = ");
      out.print( senderId );
      out.write(";     // mentor's user_login.id\r\n");
      out.write("    const receiverId = ");
      out.print( receiverId );
      out.write("; // mentee's user_login.id\r\n");
      out.write("\r\n");
      out.write("    function loadMessages() {\r\n");
      out.write("        fetch(`FetchMessagesServlet?senderId=${senderId}&receiverId=${receiverId}`)\r\n");
      out.write("            .then(response => response.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                const messagesDiv = document.getElementById('messages');\r\n");
      out.write("                messagesDiv.innerHTML = '';\r\n");
      out.write("                data.forEach(msg => {\r\n");
      out.write("                    const div = document.createElement('div');\r\n");
      out.write("                    div.className = 'message ' + (msg.senderId === senderId ? 'sent' : 'received');\r\n");
      out.write("                    div.textContent = msg.message;\r\n");
      out.write("                    messagesDiv.appendChild(div);\r\n");
      out.write("                });\r\n");
      out.write("                messagesDiv.scrollTop = messagesDiv.scrollHeight;\r\n");
      out.write("            });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function sendMessage() {\r\n");
      out.write("        const input = document.getElementById('messageInput');\r\n");
      out.write("        const message = input.value.trim();\r\n");
      out.write("        if (message === '') return;\r\n");
      out.write("\r\n");
      out.write("        fetch('SendMessageServlet', {\r\n");
      out.write("            method: 'POST',\r\n");
      out.write("            headers: {\r\n");
      out.write("                'Content-Type': 'application/x-www-form-urlencoded'\r\n");
      out.write("            },\r\n");
      out.write("            body: `senderId=${senderId}&receiverId=${receiverId}&message=${encodeURIComponent(message)}`\r\n");
      out.write("        })\r\n");
      out.write("        .then(() => {\r\n");
      out.write("            input.value = '';\r\n");
      out.write("            loadMessages();\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    loadMessages();\r\n");
      out.write("    setInterval(loadMessages, 2000);\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

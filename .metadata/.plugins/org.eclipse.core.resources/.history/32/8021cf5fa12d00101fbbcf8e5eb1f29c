package com.hrit.mentorship_platform.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hrit.mentorship_platform.dbconnection.DBConnection;
import com.hrit.mentorship_platform.model.Message;
import com.hrit.mentorship_platform.model.User;

public class MessageDao {

	public boolean sendMessage(int senderId, int receiverId, String message) {
	    String sql = "INSERT INTO messages (sender_id, receiver_id, message_content, timestamp) VALUES (?, ?, ?, NOW())";
	    try (Connection conn = DBConnection.getConnection();
	         PreparedStatement stmt = conn.prepareStatement(sql)) {
	        stmt.setInt(1, senderId);
	        stmt.setInt(2, receiverId);
	        stmt.setString(3, message);
	        int rows = stmt.executeUpdate();
	        return rows > 0;
	    } catch (SQLException e) {
	        e.printStackTrace();
	        return false;
	    }
	}
	public boolean sendMessage(Message msg) {
	    return sendMessage(msg.getSenderId(), msg.getReceiverId(), msg.getMessage());
	}


	
	
	 public List<Message> getConversation(int user1, int user2) {
	        List<Message> list = new ArrayList<>();
	        String sql = "SELECT * FROM messages WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) ORDER BY timestamp ASC";
	        try (Connection conn = DBConnection.getConnection();
	             PreparedStatement ps = conn.prepareStatement(sql)) {
	            ps.setInt(1, user1);
	            ps.setInt(2, user2);
	            ps.setInt(3, user2);
	            ps.setInt(4, user1);
	            ResultSet rs = ps.executeQuery();

	            while (rs.next()) {
	                Message m = new Message();
	                m.setId(rs.getInt("id"));
	                m.setSenderId(rs.getInt("sender_id"));
	                m.setReceiverId(rs.getInt("receiver_id"));
	                m.setMessage(rs.getString("message"));
	                m.setTimestamp(rs.getTimestamp("timestamp"));
	                list.add(m);
	            }

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return list;
	    }
	 
	 public List<Message> getMessagesBetween(int user1, int user2) {
		    List<Message> messages = new ArrayList<>();
		    String sql = "SELECT * FROM messages WHERE " +
		                 "(sender_id = ? AND receiver_id = ?) OR " +
		                 "(sender_id = ? AND receiver_id = ?) ORDER BY timestamp ASC";
		    try (Connection conn = DBConnection.getConnection();
		         PreparedStatement ps = conn.prepareStatement(sql)) {
		        ps.setInt(1, user1);
		        ps.setInt(2, user2);
		        ps.setInt(3, user2);
		        ps.setInt(4, user1);
		        ResultSet rs = ps.executeQuery();
		        while (rs.next()) {
		            Message msg = new Message();
		            msg.setId(rs.getInt("id"));
		            msg.setSenderId(rs.getInt("sender_id"));
		            msg.setReceiverId(rs.getInt("receiver_id"));
		            msg.setMessage(rs.getString("message"));
		            msg.setTimestamp(rs.getTimestamp("timestamp"));
		            messages.add(msg);
		        }
		    } catch (Exception e) {
		        e.printStackTrace();
		    }
		    return messages;
		}
	 
	 
	 public List<User> getChatPartners(int currentUserId) {
		    List<User> partners = new ArrayList<>();
		    
		    String sql = "SELECT DISTINCT u.id, u.name " +
		                 "FROM appointments a " +
		                 "JOIN user_login u ON (a.mentor_id = u.id OR a.mentee_id = u.id) " +
		                 "WHERE (a.mentor_id = ? OR a.mentee_id = ?) " +
		                 "AND u.id != ? AND a.status = 'confirmed'";

		    try (Connection conn = DBConnection.getConnection();
		         PreparedStatement stmt = conn.prepareStatement(sql)) {

		        stmt.setInt(1, currentUserId);
		        stmt.setInt(2, currentUserId);
		        stmt.setInt(3, currentUserId);

		        ResultSet rs = stmt.executeQuery();
		        while (rs.next()) {
		            User user = new User();
		            user.setId(rs.getInt("id"));
		            user.setName(rs.getString("name"));
		            partners.add(user);
		        }

		    } catch (SQLException e) {
		        e.printStackTrace();
		    }

		    return partners;
		}

		 
		 
		 public Message getLastMessageBetween(int userId1, int userId2) {
			    String sql = "SELECT * FROM messages " +
			                 "WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) " +
			                 "ORDER BY timestamp DESC LIMIT 1";
			    try (Connection conn = DBConnection.getConnection();
			         PreparedStatement stmt = conn.prepareStatement(sql)) {
			        stmt.setInt(1, userId1);
			        stmt.setInt(2, userId2);
			        stmt.setInt(3, userId2);
			        stmt.setInt(4, userId1);
			        ResultSet rs = stmt.executeQuery();
			        if (rs.next()) {
			            Message msg = new Message();
			            msg.setId(rs.getInt("id"));
			            msg.setSenderId(rs.getInt("sender_id"));
			            msg.setReceiverId(rs.getInt("receiver_id"));
			            msg.setMessage(rs.getString("message"));
			            msg.setTimestamp(rs.getTimestamp("timestamp"));
			            return msg;
			        }
			    } catch (Exception e) {
			        e.printStackTrace();
			    }
			    return null;
			}


		 public List<User> getChatPartnersFromAppointments(int currentUserId) {
			    List<User> partners = new ArrayList<>();

			    String sql = "SELECT DISTINCT u.id, u.name " +
			                 "FROM appointments a " +
			                 "JOIN user_login u ON (a.mentor_id = u.id OR a.mentee_id = u.id) " +
			                 "WHERE (a.mentor_id = ? OR a.mentee_id = ?) AND u.id != ?";

			    try (Connection conn = DBConnection.getConnection();
			         PreparedStatement stmt = conn.prepareStatement(sql)) {

			        stmt.setInt(1, currentUserId);
			        stmt.setInt(2, currentUserId);
			        stmt.setInt(3, currentUserId);

			        ResultSet rs = stmt.executeQuery();
			        while (rs.next()) {
			            User user = new User();
			            user.setId(rs.getInt("id"));
			            user.setName(rs.getString("name"));
			            partners.add(user);
			        }

			    } catch (SQLException e) {
			        e.printStackTrace();
			    }

			    return partners;
			}


}

package com.hrit.mentorship_platform.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hrit.mentorship_platform.dbconnection.DBConnection;
import com.hrit.mentorship_platform.model.Message;
import com.hrit.mentorship_platform.model.User;

public class MessageDao {

	public boolean sendMessage(Message msg) {
        String sql = "INSERT INTO messages (sender_id, receiver_id, message) VALUES (?, ?, ?)";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, msg.getSenderId());
            ps.setInt(2, msg.getReceiverId());
            ps.setString(3, msg.getMessage());
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
	
	
	 public List<Message> getConversation(int user1, int user2) {
	        List<Message> list = new ArrayList<>();
	        String sql = "SELECT * FROM messages WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) ORDER BY timestamp ASC";
	        try (Connection conn = DBConnection.getConnection();
	             PreparedStatement ps = conn.prepareStatement(sql)) {
	            ps.setInt(1, user1);
	            ps.setInt(2, user2);
	            ps.setInt(3, user2);
	            ps.setInt(4, user1);
	            ResultSet rs = ps.executeQuery();

	            while (rs.next()) {
	                Message m = new Message();
	                m.setId(rs.getInt("id"));
	                m.setSenderId(rs.getInt("sender_id"));
	                m.setReceiverId(rs.getInt("receiver_id"));
	                m.setMessage(rs.getString("message"));
	                m.setTimestamp(rs.getTimestamp("timestamp"));
	                list.add(m);
	            }

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return list;
	    }
	 
	 public List<Message> getMessagesBetween(int user1, int user2) {
		    List<Message> messages = new ArrayList<>();
		    String sql = "SELECT * FROM messages WHERE " +
		                 "(sender_id = ? AND receiver_id = ?) OR " +
		                 "(sender_id = ? AND receiver_id = ?) ORDER BY timestamp ASC";
		    try (Connection conn = DBConnection.getConnection();
		         PreparedStatement ps = conn.prepareStatement(sql)) {
		        ps.setInt(1, user1);
		        ps.setInt(2, user2);
		        ps.setInt(3, user2);
		        ps.setInt(4, user1);
		        ResultSet rs = ps.executeQuery();
		        while (rs.next()) {
		            Message msg = new Message();
		            msg.setId(rs.getInt("id"));
		            msg.setSenderId(rs.getInt("sender_id"));
		            msg.setReceiverId(rs.getInt("receiver_id"));
		            msg.setMessage(rs.getString("message"));
		            msg.setTimestamp(rs.getTimestamp("timestamp"));
		            messages.add(msg);
		        }
		    } catch (Exception e) {
		        e.printStackTrace();
		    }
		    return messages;
		}
	 
	 
		 public List<User> getChatPartners(int currentUserId) {
			    List<User> partners = new ArrayList<>();

			    String sql = "SELECT DISTINCT u.id, u.name " +
			                 "FROM messages m " +
			                 "JOIN user_login u ON (u.id = m.sender_id OR u.id = m.receiver_id) " +
			                 "WHERE (m.sender_id = ? OR m.receiver_id = ?) AND u.id != ?";

			    try (Connection conn = DBConnection.getConnection();
			         PreparedStatement stmt = conn.prepareStatement(sql)) {

			        stmt.setInt(1, currentUserId);
			        stmt.setInt(2, currentUserId);
			        stmt.setInt(3, currentUserId);

			        ResultSet rs = stmt.executeQuery();
			        while (rs.next()) {
			            User user = new User();
			            user.setId(rs.getInt("id"));
			            user.setName(rs.getString("name"));
			            partners.add(user);
			        }

			    } catch (SQLException e) {
			        e.printStackTrace();
			    }

			    return partners;
			}




}

package com.hrit.mentorship_platform.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.hrit.mentorship_platform.dbconnection.DBConnection;
import com.hrit.mentorship_platform.model.Message;

public class MessageDao {

	public boolean sendMessage(Message msg) {
        String sql = "INSERT INTO messages (sender_id, receiver_id, message) VALUES (?, ?, ?)";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, msg.getSenderId());
            ps.setInt(2, msg.getReceiverId());
            ps.setString(3, msg.getMessage());
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
	
	
	 public List<Message> getConversation(int user1, int user2) {
	        List<Message> list = new ArrayList<>();
	        String sql = "SELECT * FROM messages WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) ORDER BY timestamp ASC";
	        try (Connection conn = DBConnection.getConnection();
	             PreparedStatement ps = conn.prepareStatement(sql)) {
	            ps.setInt(1, user1);
	            ps.setInt(2, user2);
	            ps.setInt(3, user2);
	            ps.setInt(4, user1);
	            ResultSet rs = ps.executeQuery();

	            while (rs.next()) {
	                Message m = new Message();
	                m.setId(rs.getInt("id"));
	                m.setSenderId(rs.getInt("sender_id"));
	                m.setReceiverId(rs.getInt("receiver_id"));
	                m.setMessage(rs.getString("message"));
	                m.setTimestamp(rs.getTimestamp("timestamp"));
	                list.add(m);
	            }

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return list;
	    }
}
